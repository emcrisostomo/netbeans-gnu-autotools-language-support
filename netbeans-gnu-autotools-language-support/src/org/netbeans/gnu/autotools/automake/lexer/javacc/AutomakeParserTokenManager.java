/* Generated By:JavaCC: Do not edit this line. AutomakeParserTokenManager.java */
package org.netbeans.gnu.autotools.automake.lexer.javacc;

/** Token Manager. */
public class AutomakeParserTokenManager implements AutomakeParserConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x400000000000L) != 0L || (active1 & 0x10000L) != 0L)
            return 25;
         if ((active0 & 0x3fffffff00L) != 0L)
         {
            jjmatchedKind = 92;
            return 82;
         }
         return -1;
      case 1:
         if ((active0 & 0x3ffd763f00L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 92;
               jjmatchedPos = 1;
            }
            return 82;
         }
         if ((active0 & 0x289c000L) != 0L)
            return 82;
         return -1;
      case 2:
         if ((active0 & 0x804200000L) != 0L)
            return 82;
         if ((active0 & 0x37f95fbf00L) != 0L)
         {
            jjmatchedKind = 92;
            jjmatchedPos = 2;
            return 82;
         }
         return -1;
      case 3:
         if ((active0 & 0x20e11d3300L) != 0L)
         {
            jjmatchedKind = 92;
            jjmatchedPos = 3;
            return 82;
         }
         if ((active0 & 0x1718428c00L) != 0L)
            return 82;
         return -1;
      case 4:
         if ((active0 & 0xa0093100L) != 0L)
         {
            jjmatchedKind = 92;
            jjmatchedPos = 4;
            return 82;
         }
         if ((active0 & 0x2041140200L) != 0L)
            return 82;
         return -1;
      case 5:
         if ((active0 & 0x83100L) != 0L)
         {
            jjmatchedKind = 92;
            jjmatchedPos = 5;
            return 82;
         }
         if ((active0 & 0xa0010000L) != 0L)
            return 82;
         return -1;
      case 6:
         if ((active0 & 0x1000L) != 0L)
         {
            jjmatchedKind = 92;
            jjmatchedPos = 6;
            return 82;
         }
         if ((active0 & 0x82100L) != 0L)
            return 82;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 49;
         return jjMoveStringLiteralDfa1_0(0x100000000000000L, 0x0L);
      case 37:
         jjmatchedKind = 68;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2000L);
      case 38:
         jjmatchedKind = 65;
         return jjMoveStringLiteralDfa1_0(0x400000000000000L, 0x400L);
      case 40:
         return jjStopAtPos(0, 38);
      case 41:
         return jjStopAtPos(0, 39);
      case 42:
         jjmatchedKind = 63;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100L);
      case 43:
         jjmatchedKind = 61;
         return jjMoveStringLiteralDfa1_0(0x800000000000000L, 0x40L);
      case 44:
         return jjStopAtPos(0, 45);
      case 45:
         jjmatchedKind = 62;
         return jjMoveStringLiteralDfa1_0(0x1000000000000000L, 0x80L);
      case 46:
         jjmatchedKind = 46;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10000L);
      case 47:
         jjmatchedKind = 64;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200L);
      case 58:
         return jjStopAtPos(0, 52);
      case 59:
         return jjStopAtPos(0, 44);
      case 60:
         jjmatchedKind = 48;
         return jjMoveStringLiteralDfa1_0(0x40000000000000L, 0x4020L);
      case 61:
         jjmatchedKind = 47;
         return jjMoveStringLiteralDfa1_0(0x20000000000000L, 0x0L);
      case 62:
         return jjMoveStringLiteralDfa1_0(0x80000000000000L, 0x8000L);
      case 63:
         return jjStopAtPos(0, 51);
      case 91:
         return jjStopAtPos(0, 40);
      case 93:
         return jjStopAtPos(0, 41);
      case 94:
         jjmatchedKind = 67;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1000L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x300L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x1c00L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x1e000L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x1020000L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x23c0000L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x400000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x4800000L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x8000000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x10000000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x20000000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0xc0000000L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0xf00000000L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x1000000000L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x2000000000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 42);
      case 124:
         jjmatchedKind = 66;
         return jjMoveStringLiteralDfa1_0(0x200000000000000L, 0x800L);
      case 125:
         return jjStopAtPos(0, 43);
      case 126:
         return jjStopAtPos(0, 50);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStopAtPos(1, 58);
         break;
      case 43:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStopAtPos(1, 59);
         break;
      case 45:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(1, 60);
         break;
      case 46:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x10000L);
      case 60:
         if ((active1 & 0x20L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x4000L);
      case 61:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStopAtPos(1, 53);
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStopAtPos(1, 54);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStopAtPos(1, 55);
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStopAtPos(1, 56);
         else if ((active1 & 0x40L) != 0L)
            return jjStopAtPos(1, 70);
         else if ((active1 & 0x80L) != 0L)
            return jjStopAtPos(1, 71);
         else if ((active1 & 0x100L) != 0L)
            return jjStopAtPos(1, 72);
         else if ((active1 & 0x200L) != 0L)
            return jjStopAtPos(1, 73);
         else if ((active1 & 0x400L) != 0L)
            return jjStopAtPos(1, 74);
         else if ((active1 & 0x800L) != 0L)
            return jjStopAtPos(1, 75);
         else if ((active1 & 0x1000L) != 0L)
            return jjStopAtPos(1, 76);
         else if ((active1 & 0x2000L) != 0L)
            return jjStopAtPos(1, 77);
         break;
      case 62:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x8000L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x40400L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x120002000L, active1, 0L);
      case 102:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(1, 23, 82);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x2240000800L, active1, 0L);
      case 105:
         if ((active0 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 25;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x80000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x120000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x5000000L, active1, 0L);
      case 111:
         if ((active0 & 0x4000L) != 0L)
         {
            jjmatchedKind = 14;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x1008619100L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0xc00000200L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000L, active1, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000L, active1, 0L);
      case 124:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStopAtPos(1, 57);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 46:
         if ((active1 & 0x10000L) != 0L)
            return jjStopAtPos(2, 80);
         break;
      case 61:
         if ((active1 & 0x4000L) != 0L)
            return jjStopAtPos(2, 78);
         else if ((active1 & 0x8000L) != 0L)
            return jjStopAtPos(2, 79);
         break;
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x800L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000200L, active1, 0L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x3080000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x10040000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x8089000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x40100100L, active1, 0L);
      case 114:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(2, 21, 82);
         break;
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x100020400L, active1, 0L);
      case 116:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(2, 26, 82);
         return jjMoveStringLiteralDfa3_0(active0, 0x20400000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x400010000L, active1, 0L);
      case 121:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(2, 35, 82);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x182200L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000L);
      case 100:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 36, 82);
         break;
      case 101:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(3, 10, 82);
         else if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(3, 15, 82);
         else if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(3, 17, 82);
         else if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(3, 34, 82);
         break;
      case 103:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(3, 27, 82);
         break;
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000L);
      case 108:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(3, 28, 82);
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000100L);
      case 110:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(3, 33, 82);
         break;
      case 111:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(3, 22, 82);
         break;
      case 114:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(3, 11, 82);
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000L);
      case 116:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(3, 32, 82);
         return jjMoveStringLiteralDfa4_0(active0, 0x80001000L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, 0L);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000L);
      case 101:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(4, 18, 82);
         else if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 37, 82);
         return jjMoveStringLiteralDfa5_0(active0, 0x100L);
      case 102:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(4, 24, 82);
         break;
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000L);
      case 107:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(4, 9, 82);
         break;
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x90000L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000L);
      case 116:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(4, 20, 82);
         else if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(4, 30, 82);
         break;
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, 0L);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x100L);
      case 101:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(5, 16, 82);
         break;
      case 104:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(5, 31, 82);
         break;
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x82000L);
      case 110:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(5, 29, 82);
         return jjMoveStringLiteralDfa6_0(active0, 0x1000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 110:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(6, 8, 82);
         break;
      case 116:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(6, 13, 82);
         break;
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000L);
      case 121:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(6, 19, 82);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(7, 12, 82);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 82;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 82:
               case 49:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 92)
                     kind = 92;
                  jjCheckNAdd(49);
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 6);
                  else if ((0x100003600L & l) != 0L)
                  {
                     if (kind > 1)
                        kind = 1;
                  }
                  else if (curChar == 36)
                  {
                     if (kind > 92)
                        kind = 92;
                     jjCheckNAdd(49);
                  }
                  else if (curChar == 34)
                     jjCheckNAddStates(7, 9);
                  else if (curChar == 39)
                     jjAddStates(10, 11);
                  else if (curChar == 46)
                     jjCheckNAdd(25);
                  else if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 1;
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 81)
                        kind = 81;
                     jjCheckNAddTwoStates(22, 23);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 81)
                        kind = 81;
                     jjCheckNAddStates(12, 16);
                  }
                  else if (curChar == 36)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 1:
                  if (curChar != 35)
                     break;
                  if (kind > 2)
                     kind = 2;
                  jjCheckNAddStates(17, 19);
                  break;
               case 2:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 2)
                     kind = 2;
                  jjCheckNAddStates(17, 19);
                  break;
               case 3:
                  if ((0x2400L & l) != 0L && kind > 2)
                     kind = 2;
                  break;
               case 4:
                  if (curChar == 10 && kind > 2)
                     kind = 2;
                  break;
               case 5:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 6:
                  if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 7:
                  if (curChar == 40)
                     jjCheckNAddTwoStates(8, 9);
                  break;
               case 8:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddTwoStates(8, 9);
                  break;
               case 9:
                  if (curChar == 41 && kind > 3)
                     kind = 3;
                  break;
               case 10:
                  if (curChar == 36)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 21:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 81)
                     kind = 81;
                  jjCheckNAddTwoStates(22, 23);
                  break;
               case 22:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 81)
                     kind = 81;
                  jjCheckNAddTwoStates(22, 23);
                  break;
               case 24:
                  if (curChar == 46)
                     jjCheckNAdd(25);
                  break;
               case 25:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 85)
                     kind = 85;
                  jjCheckNAddStates(20, 22);
                  break;
               case 27:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(28);
                  break;
               case 28:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 85)
                     kind = 85;
                  jjCheckNAddTwoStates(28, 29);
                  break;
               case 30:
                  if (curChar == 39)
                     jjAddStates(10, 11);
                  break;
               case 31:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAdd(32);
                  break;
               case 32:
                  if (curChar == 39 && kind > 90)
                     kind = 90;
                  break;
               case 34:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAdd(32);
                  break;
               case 35:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(36, 32);
                  break;
               case 36:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(32);
                  break;
               case 37:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 38:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(36);
                  break;
               case 39:
                  if (curChar == 34)
                     jjCheckNAddStates(7, 9);
                  break;
               case 40:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 42:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 43:
                  if (curChar == 34 && kind > 91)
                     kind = 91;
                  break;
               case 44:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(23, 26);
                  break;
               case 45:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 46:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 47:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(45);
                  break;
               case 48:
                  if (curChar != 36)
                     break;
                  if (kind > 92)
                     kind = 92;
                  jjCheckNAdd(49);
                  break;
               case 50:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 6);
                  break;
               case 51:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(27, 29);
                  break;
               case 53:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(54);
                  break;
               case 54:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(54, 29);
                  break;
               case 55:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(55, 56);
                  break;
               case 57:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(58);
                  break;
               case 58:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 85)
                     kind = 85;
                  jjCheckNAddTwoStates(58, 29);
                  break;
               case 59:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(59, 60);
                  break;
               case 60:
                  if (curChar != 46)
                     break;
                  if (kind > 85)
                     kind = 85;
                  jjCheckNAddStates(30, 32);
                  break;
               case 61:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 85)
                     kind = 85;
                  jjCheckNAddStates(30, 32);
                  break;
               case 63:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(64);
                  break;
               case 64:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 85)
                     kind = 85;
                  jjCheckNAddTwoStates(64, 29);
                  break;
               case 65:
                  if (curChar != 48)
                     break;
                  if (kind > 81)
                     kind = 81;
                  jjCheckNAddStates(12, 16);
                  break;
               case 67:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 81)
                     kind = 81;
                  jjCheckNAddTwoStates(67, 23);
                  break;
               case 68:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 81)
                     kind = 81;
                  jjCheckNAddTwoStates(68, 23);
                  break;
               case 70:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjAddStates(33, 34);
                  break;
               case 71:
                  if (curChar == 46)
                     jjCheckNAdd(72);
                  break;
               case 72:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(72, 73);
                  break;
               case 74:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(75);
                  break;
               case 75:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 85)
                     kind = 85;
                  jjCheckNAddTwoStates(75, 29);
                  break;
               case 77:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(35, 37);
                  break;
               case 78:
                  if (curChar == 46)
                     jjCheckNAdd(79);
                  break;
               case 80:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(81);
                  break;
               case 81:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 85)
                     kind = 85;
                  jjCheckNAddTwoStates(81, 29);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 82:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 92)
                        kind = 92;
                     jjCheckNAdd(49);
                  }
                  if ((0x7fffffe80000000L & l) != 0L)
                     jjCheckNAddTwoStates(11, 12);
                  if (curChar == 95)
                  {
                     if (kind > 4)
                        kind = 4;
                     jjCheckNAdd(13);
                  }
                  break;
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 92)
                        kind = 92;
                     jjCheckNAdd(49);
                  }
                  if ((0x7fffffe80000000L & l) != 0L)
                     jjCheckNAddTwoStates(11, 12);
                  else if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 19;
                  if (curChar == 95)
                  {
                     if (kind > 4)
                        kind = 4;
                     jjCheckNAdd(13);
                  }
                  break;
               case 2:
                  if (kind > 2)
                     kind = 2;
                  jjAddStates(17, 19);
                  break;
               case 8:
                  jjAddStates(38, 39);
                  break;
               case 11:
                  if ((0x7fffffe80000000L & l) != 0L)
                     jjCheckNAddTwoStates(11, 12);
                  break;
               case 12:
                  if (curChar != 95)
                     break;
                  if (kind > 4)
                     kind = 4;
                  jjCheckNAdd(13);
                  break;
               case 13:
                  if ((0x7fffffeL & l) == 0L)
                     break;
                  if (kind > 4)
                     kind = 4;
                  jjCheckNAdd(13);
                  break;
               case 14:
                  if (curChar != 95)
                     break;
                  if (kind > 5)
                     kind = 5;
                  jjCheckNAdd(15);
                  break;
               case 15:
                  if ((0x7fffffeL & l) == 0L)
                     break;
                  if (kind > 5)
                     kind = 5;
                  jjCheckNAdd(15);
                  break;
               case 16:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 17:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 18:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 19:
                  if (curChar == 88)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 20:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 23:
                  if ((0x100000001000L & l) != 0L && kind > 81)
                     kind = 81;
                  break;
               case 26:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(40, 41);
                  break;
               case 29:
                  if ((0x5000000050L & l) != 0L && kind > 85)
                     kind = 85;
                  break;
               case 31:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAdd(32);
                  break;
               case 33:
                  if (curChar == 92)
                     jjAddStates(42, 44);
                  break;
               case 34:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAdd(32);
                  break;
               case 40:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 41:
                  if (curChar == 92)
                     jjAddStates(45, 47);
                  break;
               case 42:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 48:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 92)
                     kind = 92;
                  jjCheckNAdd(49);
                  break;
               case 49:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 92)
                     kind = 92;
                  jjCheckNAdd(49);
                  break;
               case 52:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(48, 49);
                  break;
               case 56:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(50, 51);
                  break;
               case 62:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(52, 53);
                  break;
               case 66:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(67);
                  break;
               case 67:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 81)
                     kind = 81;
                  jjCheckNAddTwoStates(67, 23);
                  break;
               case 69:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAddTwoStates(70, 71);
                  break;
               case 70:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddTwoStates(70, 71);
                  break;
               case 72:
                  if ((0x7e0000007eL & l) != 0L)
                     jjAddStates(54, 55);
                  break;
               case 73:
                  if ((0x1000000010000L & l) != 0L)
                     jjAddStates(56, 57);
                  break;
               case 76:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(77);
                  break;
               case 77:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(35, 37);
                  break;
               case 79:
                  if ((0x1000000010000L & l) != 0L)
                     jjAddStates(58, 59);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 2)
                     kind = 2;
                  jjAddStates(17, 19);
                  break;
               case 8:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(38, 39);
                  break;
               case 31:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 40:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(7, 9);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 82 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   51, 52, 29, 55, 56, 59, 60, 40, 41, 43, 31, 33, 66, 68, 23, 69, 
   76, 2, 3, 5, 25, 26, 29, 40, 41, 45, 43, 51, 52, 29, 61, 62, 
   29, 70, 71, 77, 78, 79, 8, 9, 27, 28, 34, 35, 37, 42, 44, 46, 
   53, 54, 57, 58, 63, 64, 72, 73, 74, 75, 80, 81, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, "\142\157\157\154\145\141\156", 
"\142\162\145\141\153", "\143\141\163\145", "\143\150\141\162", "\143\157\156\164\151\156\165\145", 
"\144\145\146\141\165\154\164", "\144\157", "\144\157\156\145", "\144\157\165\142\154\145", 
"\145\154\163\145", "\146\141\154\163\145", "\146\151\156\141\154\154\171", 
"\146\154\157\141\164", "\146\157\162", "\147\157\164\157", "\151\146", "\145\156\144\151\146", 
"\146\151", "\151\156\164", "\154\157\156\147", "\156\165\154\154", 
"\162\145\164\165\162\156", "\163\150\157\162\164", "\163\167\151\164\143\150", "\164\145\163\164", 
"\164\150\145\156", "\164\162\165\145", "\164\162\171", "\166\157\151\144", 
"\167\150\151\154\145", "\50", "\51", "\133", "\135", "\173", "\175", "\73", "\54", "\56", "\75", 
"\74", "\41", "\176", "\77", "\72", "\75\75", "\74\75", "\76\75", "\41\75", 
"\174\174", "\46\46", "\53\53", "\55\55", "\53", "\55", "\52", "\57", "\46", "\174", 
"\136", "\45", "\74\74", "\53\75", "\55\75", "\52\75", "\57\75", "\46\75", "\174\75", 
"\136\75", "\45\75", "\74\74\75", "\76\76\75", "\56\56\56", null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
protected JavaCharStream input_stream;
private final int[] jjrounds = new int[82];
private final int[] jjstateSet = new int[164];
protected char curChar;
/** Constructor. */
public AutomakeParserTokenManager(JavaCharStream stream){
   if (JavaCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public AutomakeParserTokenManager(JavaCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(JavaCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 82; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(JavaCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedPos == 0 && jjmatchedKind > 95)
   {
      jjmatchedKind = 95;
   }
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
         matchedToken = jjFillToken();
         return matchedToken;
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
