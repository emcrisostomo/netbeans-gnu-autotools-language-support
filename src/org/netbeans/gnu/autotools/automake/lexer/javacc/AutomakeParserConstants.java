/* Generated By:JavaCC: Do not edit this line. AutomakeParserConstants.java */
package org.netbeans.gnu.autotools.automake.lexer.javacc;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface AutomakeParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int WHITESPACE = 1;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 2;
  /** RegularExpression Id. */
  int BOOLEAN = 3;
  /** RegularExpression Id. */
  int BREAK = 4;
  /** RegularExpression Id. */
  int CASE = 5;
  /** RegularExpression Id. */
  int CHAR = 6;
  /** RegularExpression Id. */
  int CONTINUE = 7;
  /** RegularExpression Id. */
  int _DEFAULT = 8;
  /** RegularExpression Id. */
  int DO = 9;
  /** RegularExpression Id. */
  int DONE = 10;
  /** RegularExpression Id. */
  int DOUBLE = 11;
  /** RegularExpression Id. */
  int ELSE = 12;
  /** RegularExpression Id. */
  int FALSE = 13;
  /** RegularExpression Id. */
  int FINALLY = 14;
  /** RegularExpression Id. */
  int FLOAT = 15;
  /** RegularExpression Id. */
  int FOR = 16;
  /** RegularExpression Id. */
  int GOTO = 17;
  /** RegularExpression Id. */
  int IF = 18;
  /** RegularExpression Id. */
  int ENDIF = 19;
  /** RegularExpression Id. */
  int FI = 20;
  /** RegularExpression Id. */
  int INT = 21;
  /** RegularExpression Id. */
  int LONG = 22;
  /** RegularExpression Id. */
  int NULL = 23;
  /** RegularExpression Id. */
  int RETURN = 24;
  /** RegularExpression Id. */
  int SHORT = 25;
  /** RegularExpression Id. */
  int SWITCH = 26;
  /** RegularExpression Id. */
  int TEST = 27;
  /** RegularExpression Id. */
  int THEN = 28;
  /** RegularExpression Id. */
  int TRUE = 29;
  /** RegularExpression Id. */
  int TRY = 30;
  /** RegularExpression Id. */
  int VOID = 31;
  /** RegularExpression Id. */
  int WHILE = 32;
  /** RegularExpression Id. */
  int LPAREN = 33;
  /** RegularExpression Id. */
  int RPAREN = 34;
  /** RegularExpression Id. */
  int LBRACKET = 35;
  /** RegularExpression Id. */
  int RBRACKET = 36;
  /** RegularExpression Id. */
  int LBRACE = 37;
  /** RegularExpression Id. */
  int RBRACE = 38;
  /** RegularExpression Id. */
  int SEMICOLON = 39;
  /** RegularExpression Id. */
  int COMMA = 40;
  /** RegularExpression Id. */
  int DOT = 41;
  /** RegularExpression Id. */
  int ASSIGN = 42;
  /** RegularExpression Id. */
  int LT = 43;
  /** RegularExpression Id. */
  int BANG = 44;
  /** RegularExpression Id. */
  int TILDE = 45;
  /** RegularExpression Id. */
  int HOOK = 46;
  /** RegularExpression Id. */
  int COLON = 47;
  /** RegularExpression Id. */
  int EQ = 48;
  /** RegularExpression Id. */
  int LE = 49;
  /** RegularExpression Id. */
  int GE = 50;
  /** RegularExpression Id. */
  int NE = 51;
  /** RegularExpression Id. */
  int SC_OR = 52;
  /** RegularExpression Id. */
  int SC_AND = 53;
  /** RegularExpression Id. */
  int INCR = 54;
  /** RegularExpression Id. */
  int DECR = 55;
  /** RegularExpression Id. */
  int PLUS = 56;
  /** RegularExpression Id. */
  int MINUS = 57;
  /** RegularExpression Id. */
  int STAR = 58;
  /** RegularExpression Id. */
  int SLASH = 59;
  /** RegularExpression Id. */
  int BIT_AND = 60;
  /** RegularExpression Id. */
  int BIT_OR = 61;
  /** RegularExpression Id. */
  int XOR = 62;
  /** RegularExpression Id. */
  int REM = 63;
  /** RegularExpression Id. */
  int LSHIFT = 64;
  /** RegularExpression Id. */
  int PLUSASSIGN = 65;
  /** RegularExpression Id. */
  int MINUSASSIGN = 66;
  /** RegularExpression Id. */
  int STARASSIGN = 67;
  /** RegularExpression Id. */
  int SLASHASSIGN = 68;
  /** RegularExpression Id. */
  int ANDASSIGN = 69;
  /** RegularExpression Id. */
  int ORASSIGN = 70;
  /** RegularExpression Id. */
  int XORASSIGN = 71;
  /** RegularExpression Id. */
  int REMASSIGN = 72;
  /** RegularExpression Id. */
  int LSHIFTASSIGN = 73;
  /** RegularExpression Id. */
  int RSIGNEDSHIFTASSIGN = 74;
  /** RegularExpression Id. */
  int ELLIPSIS = 75;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 76;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 77;
  /** RegularExpression Id. */
  int HEX_LITERAL = 78;
  /** RegularExpression Id. */
  int OCTAL_LITERAL = 79;
  /** RegularExpression Id. */
  int FLOATING_POINT_LITERAL = 80;
  /** RegularExpression Id. */
  int DECIMAL_FLOATING_POINT_LITERAL = 81;
  /** RegularExpression Id. */
  int DECIMAL_EXPONENT = 82;
  /** RegularExpression Id. */
  int HEXADECIMAL_FLOATING_POINT_LITERAL = 83;
  /** RegularExpression Id. */
  int HEXADECIMAL_EXPONENT = 84;
  /** RegularExpression Id. */
  int CHARACTER_LITERAL = 85;
  /** RegularExpression Id. */
  int STRING_LITERAL = 86;
  /** RegularExpression Id. */
  int IDENTIFIER = 87;
  /** RegularExpression Id. */
  int LETTER = 88;
  /** RegularExpression Id. */
  int PART_LETTER = 89;
  /** RegularExpression Id. */
  int TEXT = 90;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "<WHITESPACE>",
    "<SINGLE_LINE_COMMENT>",
    "\"boolean\"",
    "\"break\"",
    "\"case\"",
    "\"char\"",
    "\"continue\"",
    "\"default\"",
    "\"do\"",
    "\"done\"",
    "\"double\"",
    "\"else\"",
    "\"false\"",
    "\"finally\"",
    "\"float\"",
    "\"for\"",
    "\"goto\"",
    "\"if\"",
    "\"endif\"",
    "\"fi\"",
    "\"int\"",
    "\"long\"",
    "\"null\"",
    "\"return\"",
    "\"short\"",
    "\"switch\"",
    "\"test\"",
    "\"then\"",
    "\"true\"",
    "\"try\"",
    "\"void\"",
    "\"while\"",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\"{\"",
    "\"}\"",
    "\";\"",
    "\",\"",
    "\".\"",
    "\"=\"",
    "\"<\"",
    "\"!\"",
    "\"~\"",
    "\"?\"",
    "\":\"",
    "\"==\"",
    "\"<=\"",
    "\">=\"",
    "\"!=\"",
    "\"||\"",
    "\"&&\"",
    "\"++\"",
    "\"--\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"&\"",
    "\"|\"",
    "\"^\"",
    "\"%\"",
    "\"<<\"",
    "\"+=\"",
    "\"-=\"",
    "\"*=\"",
    "\"/=\"",
    "\"&=\"",
    "\"|=\"",
    "\"^=\"",
    "\"%=\"",
    "\"<<=\"",
    "\">>=\"",
    "\"...\"",
    "<INTEGER_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<HEX_LITERAL>",
    "<OCTAL_LITERAL>",
    "<FLOATING_POINT_LITERAL>",
    "<DECIMAL_FLOATING_POINT_LITERAL>",
    "<DECIMAL_EXPONENT>",
    "<HEXADECIMAL_FLOATING_POINT_LITERAL>",
    "<HEXADECIMAL_EXPONENT>",
    "<CHARACTER_LITERAL>",
    "<STRING_LITERAL>",
    "<IDENTIFIER>",
    "<LETTER>",
    "<PART_LETTER>",
    "<TEXT>",
  };

}
