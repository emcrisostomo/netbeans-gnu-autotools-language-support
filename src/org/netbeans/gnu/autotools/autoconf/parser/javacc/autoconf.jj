/* 
 * Copyright (C) 2014, Enrico M. Crisostomo
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
options {
  JAVA_UNICODE_ESCAPE = true;
  ERROR_REPORTING = true;
  STATIC = false;
  COMMON_TOKEN_ACTION = false;
  TOKEN_FACTORY = "MyToken";
  JDK_VERSION = "1.5";
}

PARSER_BEGIN(AutoconfParser)

package org.netbeans.gnu.autotools.autoconf.parser.javacc;

import java.io.*;
import java.util.*;

/**
 * Grammar to parse an Autoconf .ac file.
 * 
 * @author Enrico M. Crisostomo
 */
public class AutoconfParser
{
   /**
    * Class to hold modifiers.
    */
   static public final class ModifierSet
   {
     /* Definitions of the bits in the modifiers field.  */
     public static final int PUBLIC = 0x0001;
     public static final int PROTECTED = 0x0002;
     public static final int PRIVATE = 0x0004;
     public static final int ABSTRACT = 0x0008;
     public static final int STATIC = 0x0010;
     public static final int FINAL = 0x0020;
     public static final int SYNCHRONIZED = 0x0040;
     public static final int NATIVE = 0x0080;
     public static final int TRANSIENT = 0x0100;
     public static final int VOLATILE = 0x0200;
     public static final int STRICTFP = 0x1000;

     /** A set of accessors that indicate whether the specified modifier
         is in the set. */

     public boolean isPublic(int modifiers)
     {
       return (modifiers & PUBLIC) != 0;
     }

     public boolean isProtected(int modifiers)
     {
       return (modifiers & PROTECTED) != 0;
     }

     public boolean isPrivate(int modifiers)
     {
       return (modifiers & PRIVATE) != 0;
     }

     public boolean isStatic(int modifiers)
     {
       return (modifiers & STATIC) != 0;
     }

     public boolean isAbstract(int modifiers)
     {
       return (modifiers & ABSTRACT) != 0;
     }

     public boolean isFinal(int modifiers)
     {
       return (modifiers & FINAL) != 0;
     }

     public boolean isNative(int modifiers)
     {
       return (modifiers & NATIVE) != 0;
     }

     public boolean isStrictfp(int modifiers)
     {
       return (modifiers & STRICTFP) != 0;
     }

     public boolean isSynchronized(int modifiers)
     {
       return (modifiers & SYNCHRONIZED) != 0;
     }

     public boolean isTransient(int modifiers)
      {
       return (modifiers & TRANSIENT) != 0;
     }

     public boolean isVolatile(int modifiers)
     {
       return (modifiers & VOLATILE) != 0;
     }

     /**
      * Removes the given modifier.
      */
     static int removeModifier(int modifiers, int mod)
     {
        return modifiers & ~mod;
     }
   }

   public AutoconfParser(String fileName)
   {
      this(System.in);
      try { ReInit(new FileInputStream(new File(fileName))); }
      catch(Exception e) { e.printStackTrace(); }
   }

  public static void main(String args[]) {
    AutoconfParser parser;
    if (args.length == 0) {
      System.out.println("Autoconf Parser Version 1.0:  Reading from standard input . . .");
      parser = new AutoconfParser(System.in);
    } else if (args.length == 1) {
      System.out.println("Autoconf Parser Version 1.0:  Reading from file " + args[0] + " . . .");
      try {
        parser = new AutoconfParser(new java.io.FileInputStream(args[0]));
      } catch (java.io.FileNotFoundException e) {
        System.out.println("Autoconf Parser Version 1.0  File " + args[0] + " not found.");
        return;
      }
    } else {
      System.out.println("Autoconf Parser Version 1.0:  Usage is one of:");
      System.out.println("         java AutoconfParser < inputfile");
      System.out.println("OR");
      System.out.println("         java AutoconfParser inputfile");
      return;
    }
    try {
      parser.CompilationUnit();
      System.out.println("Autoconf Parser Version 1.0:  Java program parsed successfully.");
    } catch (ParseException e) {
      System.out.println(e.getMessage());
      System.out.println("Autoconf Parser Version 1.0:  Encountered errors during parse.");
    }
  }
}

PARSER_END(AutoconfParser)


/* WHITE SPACE */

TOKEN :
{
  < WHITESPACE:
  " "
| "\t"
| "\n"
| "\r"
| "\f">
}

/* COMMENTS */

<DEFAULT>
TOKEN :
{
  <SINGLE_LINE_COMMENT: "#" (~["\n", "\r"])* ("\n" | "\r" | "\r\n")?>
}

TOKEN_MGR_DECLS : {
  int m4NestingDepth ;
}

/* SEPARATORS */

<DEFAULT>
TOKEN : 
{
  < LBRACKET: "[" > { 
    m4NestingDepth = 1;
  } : MCOMMENT
}

<MCOMMENT>
TOKEN : 
{
  < MLBRACKET: "[" > {
    m4NestingDepth += 1; 
  }
}

<MCOMMENT>
TOKEN :
{
  < MRBRACKET: "]" > {
    if (m4NestingDepth == 1)
    {
      SwitchTo( DEFAULT );
    }
    m4NestingDepth -= 1;
  }
}

<DEFAULT>
TOKEN :
{
  < RBRACKET: "]" > {
    m4NestingDepth = 0;
  }
}

/* Reserved words */

<*>
TOKEN :
{
  < BOOLEAN: "boolean" >
| < BREAK: "break" >
| < CASE: "case" >
| < CHAR: "char" >
| < CONTINUE: "continue" >
| < _DEFAULT: "default" >
| < DO: "do" >
| < DONE: "done" >
| < DOUBLE: "double" >
| < ELSE: "else" >
| < FALSE: "false" >
| < FINALLY: "finally" >
| < FLOAT: "float" >
| < FOR: "for" >
| < GOTO: "goto" >
| < IF: "if" >
| < FI: "fi" >
| < INT: "int" >
| < LONG: "long" >
| < NULL: "null" >
| < RETURN: "return" >
| < SHORT: "short" >
| < SWITCH: "switch" >
| < TEST: "test" >
| < THEN: "then" >
| < TRUE: "true" >
| < TRY: "try" >
| < VOID: "void" >
| < WHILE: "while" >
}

/* SEPARATORS */

<*>
TOKEN :
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < SEMICOLON: ";" >
| < COMMA: "," >
| < DOT: "." >
}

/* OPERATORS */

<*>
TOKEN :
{
  < ASSIGN: "=" >
| < LT: "<" >
| < BANG: "!" >
| < TILDE: "~" >
| < HOOK: "?" >
| < COLON: ":" >
| < EQ: "==" >
| < LE: "<=" >
| < GE: ">=" >
| < NE: "!=" >
| < SC_OR: "||" >
| < SC_AND: "&&" >
| < INCR: "++" >
| < DECR: "--" >
| < PLUS: "+" >
| < MINUS: "-" >
| < STAR: "*" >
| < SLASH: "/" >
| < BIT_AND: "&" >
| < BIT_OR: "|" >
| < XOR: "^" >
| < REM: "%" >
| < LSHIFT: "<<" >
| < PLUSASSIGN: "+=" >
| < MINUSASSIGN: "-=" >
| < STARASSIGN: "*=" >
| < SLASHASSIGN: "/=" >
| < ANDASSIGN: "&=" >
| < ORASSIGN: "|=" >
| < XORASSIGN: "^=" >
| < REMASSIGN: "%=" >
| < LSHIFTASSIGN: "<<=" >
| < RSIGNEDSHIFTASSIGN: ">>=" >
| < ELLIPSIS: "..." >
}

<*>
TOKEN :
{
  < LBRACKET_QG: "@<:@" >
| < RBRACKET_QG: "@:>@" >
| < DOLLAR_QG:   "@S|@" >
| < BANG_QG:     "@%:@" >
| < LBRACE_QG:   "@{:@" >
| < RBRACE_QG:   "@:}@" >
| < EMPTY_QG:    "@&t@" >
}

/* LITERALS */

<*>
TOKEN :
{
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL> (["l","L"])?
      | <HEX_LITERAL> (["l","L"])?
      | <OCTAL_LITERAL> (["l","L"])?
  >
|
  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
|
  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
|
  < #OCTAL_LITERAL: "0" (["0"-"7"])* >
|
  < FLOATING_POINT_LITERAL:
        <DECIMAL_FLOATING_POINT_LITERAL>
      | <HEXADECIMAL_FLOATING_POINT_LITERAL>
  >
|
  < #DECIMAL_FLOATING_POINT_LITERAL:
        (["0"-"9"])+ "." (["0"-"9"])* (<DECIMAL_EXPONENT>)? (["f","F","d","D"])?
      | "." (["0"-"9"])+ (<DECIMAL_EXPONENT>)? (["f","F","d","D"])?
      | (["0"-"9"])+ <DECIMAL_EXPONENT> (["f","F","d","D"])?
      | (["0"-"9"])+ (<DECIMAL_EXPONENT>)? ["f","F","d","D"]
  >
|
  < #DECIMAL_EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
|
  < #HEXADECIMAL_FLOATING_POINT_LITERAL:
        "0" ["x", "X"] (["0"-"9","a"-"f","A"-"F"])+ (".")? <HEXADECIMAL_EXPONENT> (["f","F","d","D"])?
      | "0" ["x", "X"] (["0"-"9","a"-"f","A"-"F"])* "." (["0"-"9","a"-"f","A"-"F"])+ <HEXADECIMAL_EXPONENT> (["f","F","d","D"])?
  >
|
  < #HEXADECIMAL_EXPONENT: ["p","P"] (["+","-"])? (["0"-"9"])+ >
|
  < CHARACTER_LITERAL:
      "'"
      (   (~["'","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )
      "'"
  >
|
  < STRING_LITERAL:
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
  >
}

/* Autoconf macros */

<*>
TOKEN :
{
  < AC_ARG_VAR: "AC_ARG_VAR" >
| < AC_ARG_ENABLE: "AC_ARG_ENABLE" >
| < AC_ARG_PROGRAM: "AC_ARG_PROGRAM" >
| < AC_ARG_WITH: "AC_ARG_WITH" >
| < AC_AUTOCONF_VERSION: "AC_AUTOCONF_VERSION" >
| < AC_BEFORE: "AC_BEFORE" >
| < AC_C_BACKSLASH_A: "AC_C_BACKSLASH_A" >
| < AC_C_BIGENDIAN: "AC_C_BIGENDIAN" >
| < AC_C_CHAR_UNSIGNED: "AC_C_CHAR_UNSIGNED" >
| < AC_C_CONST: "AC_C_CONST" >
| < AC_C_FLEXIBLE_ARRAY_MEMBER: "AC_C_FLEXIBLE_ARRAY_MEMBER" >
| < AC_C_INLINE: "AC_C_INLINE" >
| < AC_C_PROTOTYPES: "AC_C_PROTOTYPES" >
| < AC_C_RESTRICT: "AC_C_RESTRICT" >
| < AC_C_STRINGIZE: "AC_C_STRINGIZE" >
| < AC_C_TYPEOF: "AC_C_TYPEOF" >
| < AC_C_VARARRAYS: "AC_C_VARARRAYS" >
| < AC_C_VOLATILE: "AC_C_VOLATILE" >
| < AC_CACHE_CHECK: "AC_CACHE_CHECK" >
| < AC_CACHE_LOAD: "AC_CACHE_LOAD" >
| < AC_CACHE_SAVE: "AC_CACHE_SAVE" >
| < AC_CACHE_VAL: "AC_CACHE_VAL" >
| < AC_CANONICAL_BUILD: "AC_CANONICAL_BUILD" >
| < AC_CANONICAL_HOST: "AC_CANONICAL_HOST" >
| < AC_CANONICAL_TARGET: "AC_CANONICAL_TARGET" >
| < AC_CHECK_ALIGNOF: "AC_CHECK_ALIGNOF" >
| < AC_CHECK_DECL: "AC_CHECK_DECL" >
| < AC_CHECK_DECLS: "AC_CHECK_DECLS" >
| < AC_CHECK_DECLS_ONCE: "AC_CHECK_DECLS_ONCE" >
| < AC_CHECK_FILE: "AC_CHECK_FILE" >
| < AC_CHECK_FILES: "AC_CHECK_FILES" >
| < AC_CHECK_FUNC: "AC_CHECK_FUNC" >
| < AC_CHECK_FUNCS: "AC_CHECK_FUNCS" >
| < AC_CHECK_FUNCS_ONCE: "AC_CHECK_FUNCS_ONCE" >
| < AC_CHECK_LIB: "AC_CHECK_LIB" >
| < AC_CHECK_HEADER: "AC_CHECK_HEADER" >
| < AC_CHECK_HEADER_STDBOOL: "AC_CHECK_HEADER_STDBOOL" >
| < AC_CHECK_HEADERS: "AC_CHECK_HEADERS" >
| < AC_CHECK_HEADERS_ONCE: "AC_CHECK_HEADERS_ONCE" >
| < AC_CHECK_MEMBER: "AC_CHECK_MEMBER" >
| < AC_CHECK_MEMBERS: "AC_CHECK_MEMBERS" >
| < AC_CHECK_PROG: "AC_CHECK_PROG" >
| < AC_CHECK_PROGS: "AC_CHECK_PROGS" >
| < AC_CHECK_SIZEOF: "AC_CHECK_SIZEOF" >
| < AC_CHECK_TARGET_TOOL: "AC_CHECK_TARGET_TOOL" >
| < AC_CHECK_TARGET_TOOLS: "AC_CHECK_TARGET_TOOLS" >
| < AC_CHECK_TYPE: "AC_CHECK_TYPE" >
| < AC_CHECK_TYPES: "AC_CHECK_TYPES" >
| < AC_CHECK_TOOL: "AC_CHECK_TOOL" >
| < AC_CHECK_TOOLS: "AC_CHECK_TOOLS" >
| < AC_COMPILE_IFELSE: "AC_COMPILE_IFELSE" >
| < AC_COMPUTE_INT: "AC_COMPUTE_INT" >
| < AC_CONFIG_AUX_DIR: "AC_CONFIG_AUX_DIR" >
| < AC_CONFIG_COMMANDS: "AC_CONFIG_COMMANDS" >
| < AC_CONFIG_COMMANDS_PRE: "AC_CONFIG_COMMANDS_PRE" >
| < AC_CONFIG_COMMANDS_POST: "AC_CONFIG_COMMANDS_POST" >
| < AC_CONFIG_FILES: "AC_CONFIG_FILES" >
| < AC_CONFIG_HEADERS: "AC_CONFIG_HEADERS" >
| < AC_CONFIG_LIBOBJ_DIR: "AC_CONFIG_LIBOBJ_DIR" >
| < AC_CONFIG_LINKS: "AC_CONFIG_LINKS" >
| < AC_CONFIG_MACRO_DIR: "AC_CONFIG_MACRO_DIR" >
| < AC_CONFIG_MACRO_DIRS: "AC_CONFIG_MACRO_DIRS" >
| < AC_CONFIG_SRCDIR: "AC_CONFIG_SRCDIR" >
| < AC_CONFIG_SUBDIRS: "AC_CONFIG_SUBDIRS" >
| < AC_COPYRIGHT: "AC_COPYRIGHT" >
| < AC_DEFINE: "AC_DEFINE" >
| < AC_DEFINE_UNQUOTED: "AC_DEFINE_UNQUOTED" >
| < AC_DEFUN: "AC_DEFUN" >
| < AC_DEFUN_ONCE: "AC_DEFUN_ONCE" >
| < AC_DIAGNOSE: "AC_DIAGNOSE" >
| < AC_DISABLE_OPTION_CHECKING: "AC_DISABLE_OPTION_CHECKING" >
| < AC_EGREP_CPP: "AC_EGREP_CPP" >
| < AC_EGREP_HEADER: "AC_EGREP_HEADER" >
| < AC_ERLANG_CHECK_LIB: "AC_ERLANG_CHECK_LIB" >
| < AC_ERLANG_NEED_ERL: "AC_ERLANG_NEED_ERL" >
| < AC_ERLANG_NEED_ERLC: "AC_ERLANG_NEED_ERLC" >
| < AC_ERLANG_PATH_ERL: "AC_ERLANG_PATH_ERL" >
| < AC_ERLANG_PATH_ERLC: "AC_ERLANG_PATH_ERLC" >
| < AC_ERLANG_SUBST_ERTS_VER: "AC_ERLANG_SUBST_ERTS_VER" >
| < AC_ERLANG_SUBST_INSTALL_LIB_DIR: "AC_ERLANG_SUBST_INSTALL_LIB_DIR" >
| < AC_ERLANG_SUBST_INSTALL_LIB_SUBDIR: "AC_ERLANG_SUBST_INSTALL_LIB_SUBDIR" >
| < AC_ERLANG_SUBST_LIB_DIR: "AC_ERLANG_SUBST_LIB_DIR" >
| < AC_ERLANG_SUBST_ROOT_DIR: "AC_ERLANG_SUBST_ROOT_DIR" >
| < AC_F77_DUMMY_MAIN: "AC_F77_DUMMY_MAIN" >
| < AC_F77_FUNC: "AC_F77_FUNC" >
| < AC_F77_IMPLICIT_NONE: "AC_F77_IMPLICIT_NONE" >
| < AC_F77_LIBRARY_LDFLAGS: "AC_F77_LIBRARY_LDFLAGS" >
| < AC_F77_MAIN: "AC_F77_MAIN" >
| < AC_F77_WRAPPERS: "AC_F77_WRAPPERS" >
| < AC_FATAL: "AC_FATAL" >
| < AC_FC_CHECK_BOUNDS: "AC_FC_CHECK_BOUNDS" >
| < AC_FC_DUMMY_MAIN: "AC_FC_DUMMY_MAIN" >
| < AC_FC_FIXEDFORM: "AC_FC_FIXEDFORM" >
| < AC_FC_FREEFORM: "AC_FC_FREEFORM" >
| < AC_FC_FUNC: "AC_FC_FUNC" >
| < AC_FC_IMPLICIT_NONE: "AC_FC_IMPLICIT_NONE" >
| < AC_FC_LIBRARY_LDFLAGS: "AC_FC_LIBRARY_LDFLAGS" >
| < AC_FC_LINE_LENGTH: "AC_FC_LINE_LENGTH" >
| < AC_FC_MAIN: "AC_FC_MAIN" >
| < AC_FC_MODULE_EXTENSION: "AC_FC_MODULE_EXTENSION" >
| < AC_FC_MODULE_FLAG: "AC_FC_MODULE_FLAG" >
| < AC_FC_MODULE_OUTPUT_FLAG: "AC_FC_MODULE_OUTPUT_FLAG" >
| < AC_FC_PP_DEFINE: "AC_FC_PP_DEFINE" >
| < AC_FC_PP_SRCEXT: "AC_FC_PP_SRCEXT" >
| < AC_FC_SRCEXT: "AC_FC_SRCEXT" >
| < AC_FC_WRAPPERS: "AC_FC_WRAPPERS" >
| < AC_FUNC_ALLOCA: "AC_FUNC_ALLOCA" >
| < AC_FUNC_CHOWN: "AC_FUNC_CHOWN" >
| < AC_FUNC_CLOSEDIR_VOID: "AC_FUNC_CLOSEDIR_VOID" >
| < AC_FUNC_ERROR_AT_LINE: "AC_FUNC_ERROR_AT_LINE" >
| < AC_FUNC_FNMATCH: "AC_FUNC_FNMATCH" >
| < AC_FUNC_FNMATCH_GNU: "AC_FUNC_FNMATCH_GNU" >
| < AC_FUNC_FORK: "AC_FUNC_FORK" >
| < AC_FUNC_FSEEKO: "AC_FUNC_FSEEKO" >
| < AC_FUNC_GETGROUPS: "AC_FUNC_GETGROUPS" >
| < AC_FUNC_GETLOADAVG: "AC_FUNC_GETLOADAVG" >
| < AC_FUNC_GETMNTENT: "AC_FUNC_GETMNTENT" >
| < AC_FUNC_GETPGRP: "AC_FUNC_GETPGRP" >
| < AC_FUNC_LSTAT_FOLLOWS_SLASHED_SYMLINK: "AC_FUNC_LSTAT_FOLLOWS_SLASHED_SYMLINK" >
| < AC_FUNC_MALLOC: "AC_FUNC_MALLOC" >
| < AC_FUNC_MBRTOWC: "AC_FUNC_MBRTOWC" >
| < AC_FUNC_MEMCMP: "AC_FUNC_MEMCMP" >
| < AC_FUNC_MKTIME: "AC_FUNC_MKTIME" >
| < AC_FUNC_MMAP: "AC_FUNC_MMAP" >
| < AC_FUNC_OBSTACK: "AC_FUNC_OBSTACK" >
| < AC_FUNC_REALLOC: "AC_FUNC_REALLOC" >
| < AC_FUNC_SELECT_ARGTYPES: "AC_FUNC_SELECT_ARGTYPES" >
| < AC_FUNC_SETPGRP: "AC_FUNC_SETPGRP" >
| < AC_FUNC_STAT: "AC_FUNC_STAT" >
| < AC_FUNC_LSTAT: "AC_FUNC_LSTAT" >
| < AC_FUNC_STRCOLL: "AC_FUNC_STRCOLL" >
| < AC_FUNC_STRERROR_R: "AC_FUNC_STRERROR_R" >
| < AC_FUNC_STRFTIME: "AC_FUNC_STRFTIME" >
| < AC_FUNC_STRTOD: "AC_FUNC_STRTOD" >
| < AC_FUNC_STRTOLD: "AC_FUNC_STRTOLD" >
| < AC_FUNC_STRNLEN: "AC_FUNC_STRNLEN" >
| < AC_FUNC_UTIME_NULL: "AC_FUNC_UTIME_NULL" >
| < AC_FUNC_VPRINTF: "AC_FUNC_VPRINTF" >
| < AC_HEADER_ASSERT: "AC_HEADER_ASSERT" >
| < AC_HEADER_DIRENT: "AC_HEADER_DIRENT" >
| < AC_HEADER_MAJOR: "AC_HEADER_MAJOR" >
| < AC_HEADER_RESOLV: "AC_HEADER_RESOLV" >
| < AC_HEADER_STAT: "AC_HEADER_STAT" >
| < AC_HEADER_STDBOOL: "AC_HEADER_STDBOOL" >
| < AC_HEADER_STDC: "AC_HEADER_STDC" >
| < AC_HEADER_SYS_WAIT: "AC_HEADER_SYS_WAIT" >
| < AC_HEADER_TIME: "AC_HEADER_TIME" >
| < AC_HEADER_TIOCGWINSZ: "AC_HEADER_TIOCGWINSZ" >
| < AC_INCLUDES_DEFAULT: "AC_INCLUDES_DEFAULT" >
| < AC_INIT: "AC_INIT" >
| < AC_LANG: "AC_LANG" >
| < AC_LANG_ASSERT: "AC_LANG_ASSERT" >
| < AC_LANG_CALL: "AC_LANG_CALL" >
| < AC_LANG_CONFTEST: "AC_LANG_CONFTEST" >
| < AC_LANG_DEFINES_PROVIDED: "AC_LANG_DEFINES_PROVIDED" >
| < AC_LANG_FUNC_LINK_TRY: "AC_LANG_FUNC_LINK_TRY" >
| < AC_LANG_POP: "AC_LANG_POP" >
| < AC_LANG_PROGRAM: "AC_LANG_PROGRAM" >
| < AC_LANG_PUSH: "AC_LANG_PUSH" >
| < AC_LANG_SOURCE: "AC_LANG_SOURCE" >
| < AC_LANG_WERROR: "AC_LANG_WERROR" >
| < AC_LIBOBJ: "AC_LIBOBJ" >
| < AC_LIBSOURCE: "AC_LIBSOURCE" >
| < AC_LIBSOURCES: "AC_LIBSOURCES" >
| < AC_LINK_IFELSE: "AC_LINK_IFELSE" >
| < AC_MSG_CHECKING: "AC_MSG_CHECKING" >
| < AC_MSG_ERROR: "AC_MSG_ERROR" >
| < AC_MSG_FAILURE: "AC_MSG_FAILURE" >
| < AC_MSG_NOTICE: "AC_MSG_NOTICE" >
| < AC_MSG_RESULT: "AC_MSG_RESULT" >
| < AC_MSG_WARN: "AC_MSG_WARN" >
| < AC_OPENMP: "AC_OPENMP" >
| < AC_OUTPUT: "AC_OUTPUT" >
| < AC_PACKAGE_BUGREPORT: "AC_PACKAGE_BUGREPORT" >
| < AC_PACKAGE_NAME: "AC_PACKAGE_NAME" >
| < AC_PACKAGE_STRING: "AC_PACKAGE_STRING" >
| < AC_PACKAGE_TARNAME: "AC_PACKAGE_TARNAME" >
| < AC_PACKAGE_URL: "AC_PACKAGE_URL" >
| < AC_PACKAGE_VERSION: "AC_PACKAGE_VERSION" >
| < AC_PATH_PROG: "AC_PATH_PROG" >
| < AC_PATH_PROGS: "AC_PATH_PROGS" >
| < AC_PATH_PROGS_FEATURE_CHECK: "AC_PATH_PROGS_FEATURE_CHECK" >
| < AC_PATH_TARGET_TOOL: "AC_PATH_TARGET_TOOL" >
| < AC_PATH_TOOL: "AC_PATH_TOOL" >
| < AC_PATH_X: "AC_PATH_X" >
| < AC_PATH_XTRA: "AC_PATH_XTRA" >
| < AC_PREFIX_DEFAULT: "AC_PREFIX_DEFAULT" >
| < AC_PREFIX_PROGRAM: "AC_PREFIX_PROGRAM" >
| < AC_PREPROC_IFELSE: "AC_PREPROC_IFELSE" >
| < AC_PREREQ: "AC_PREREQ" >
| < AC_PRESERVE_HELP_ORDER: "AC_PRESERVE_HELP_ORDER" >
| < AC_PROG_AWK: "AC_PROG_AWK" >
| < AC_PROG_CC: "AC_PROG_CC" >
| < AC_PROG_CC_C_O: "AC_PROG_CC_C_O" >
| < AC_PROG_CC_C89: "AC_PROG_CC_C89" >
| < AC_PROG_CC_C99: "AC_PROG_CC_C99" >
| < AC_PROG_CC_STDC: "AC_PROG_CC_STDC" >
| < AC_PROG_CPP: "AC_PROG_CPP" >
| < AC_PROG_CPP_WERROR: "AC_PROG_CPP_WERROR" >
| < AC_PROG_CXX: "AC_PROG_CXX" >
| < AC_PROG_CXX_C_O: "AC_PROG_CXX_C_O" >
| < AC_PROG_CXXCPP: "AC_PROG_CXXCPP" >
| < AC_PROG_EGREP: "AC_PROG_EGREP" >
| < AC_PROG_F77: "AC_PROG_F77" >
| < AC_PROG_F77_C_O: "AC_PROG_F77_C_O" >
| < AC_PROG_FC: "AC_PROG_FC" >
| < AC_PROG_FC_C_O: "AC_PROG_FC_C_O" >
| < AC_PROG_FGREP: "AC_PROG_FGREP" >
| < AC_PROG_GCC_TRADITIONAL: "AC_PROG_GCC_TRADITIONAL" >
| < AC_PROG_GO: "AC_PROG_GO" >
| < AC_PROG_GREP: "AC_PROG_GREP" >
| < AC_PROG_INSTALL: "AC_PROG_INSTALL" >
| < AC_PROG_LEX: "AC_PROG_LEX" >
| < AC_PROG_LN_S: "AC_PROG_LN_S" >
| < AC_PROG_MAKE_SET: "AC_PROG_MAKE_SET" >
| < AC_PROG_MKDIR_P: "AC_PROG_MKDIR_P" >
| < AC_PROG_OBJC: "AC_PROG_OBJC" >
| < AC_PROG_OBJCPP: "AC_PROG_OBJCPP" >
| < AC_PROG_OBJCXX: "AC_PROG_OBJCXX" >
| < AC_PROG_OBJCXXCPP: "AC_PROG_OBJCXXCPP" >
| < AC_PROG_RANLIB: "AC_PROG_RANLIB" >
| < AC_PROG_SED: "AC_PROG_SED" >
| < AC_PROG_YACC: "AC_PROG_YACC" >
| < AC_REPLACE_FNMATCH: "AC_REPLACE_FNMATCH" >
| < AC_REPLACE_FUNCS: "AC_REPLACE_FUNCS" >
| < AC_REQUIRE: "AC_REQUIRE" >
| < AC_REQUIRE_AUX_FILE: "AC_REQUIRE_AUX_FILE" >
| < AC_REQUIRE_CPP: "AC_REQUIRE_CPP" >
| < AC_REVISION: "AC_REVISION" >
| < AC_RUN_IFELSE: "AC_RUN_IFELSE" >
| < AC_SEARCH_LIBS: "AC_SEARCH_LIBS" >
| < AC_STRUCT_DIRENT_D_INO: "AC_STRUCT_DIRENT_D_INO" >
| < AC_STRUCT_DIRENT_D_TYPE: "AC_STRUCT_DIRENT_D_TYPE" >
| < AC_STRUCT_ST_BLOCKS: "AC_STRUCT_ST_BLOCKS" >
| < AC_STRUCT_TM: "AC_STRUCT_TM" >
| < AC_STRUCT_TIMEZONE: "AC_STRUCT_TIMEZONE" >
| < AC_SUBST: "AC_SUBST" >
| < AC_SUBST_FILE: "AC_SUBST_FILE" >
| < AC_SYS_INTERPRETER: "AC_SYS_INTERPRETER" >
| < AC_SYS_LARGEFILE: "AC_SYS_LARGEFILE" >
| < AC_SYS_LONG_FILE_NAMES: "AC_SYS_LONG_FILE_NAMES" >
| < AC_SYS_POSIX_TERMIOS: "AC_SYS_POSIX_TERMIOS" >
| < AC_TYPE_GETGROUPS: "AC_TYPE_GETGROUPS" >
| < AC_TYPE_INT8_T: "AC_TYPE_INT8_T" >
| < AC_TYPE_INT16_T: "AC_TYPE_INT16_T" >
| < AC_TYPE_INT32_T: "AC_TYPE_INT32_T" >
| < AC_TYPE_INT64_T: "AC_TYPE_INT64_T" >
| < AC_TYPE_INTMAX_T: "AC_TYPE_INTMAX_T" >
| < AC_TYPE_INTPTR_T: "AC_TYPE_INTPTR_T" >
| < AC_TYPE_LONG_DOUBLE: "AC_TYPE_LONG_DOUBLE" >
| < AC_TYPE_LONG_DOUBLE_WIDER: "AC_TYPE_LONG_DOUBLE_WIDER" >
| < AC_TYPE_LONG_LONG_INT: "AC_TYPE_LONG_LONG_INT" >
| < AC_TYPE_MBSTATE_T: "AC_TYPE_MBSTATE_T" >
| < AC_TYPE_MODE_T: "AC_TYPE_MODE_T" >
| < AC_TYPE_OFF_T: "AC_TYPE_OFF_T" >
| < AC_TYPE_PID_T: "AC_TYPE_PID_T" >
| < AC_TYPE_SIZE_T: "AC_TYPE_SIZE_T" >
| < AC_TYPE_SSIZE_T: "AC_TYPE_SSIZE_T" >
| < AC_TYPE_UID_T: "AC_TYPE_UID_T" >
| < AC_TYPE_UINT8_T: "AC_TYPE_UINT8_T" >
| < AC_TYPE_UINT16_T: "AC_TYPE_UINT16_T" >
| < AC_TYPE_UINT32_T: "AC_TYPE_UINT32_T" >
| < AC_TYPE_UINT64_T: "AC_TYPE_UINT64_T" >
| < AC_TYPE_UINTMAX_T: "AC_TYPE_UINTMAX_T" >
| < AC_TYPE_UINTPTR_T: "AC_TYPE_UINTPTR_T" >
| < AC_TYPE_UNSIGNED_LONG_LONG_INT: "AC_TYPE_UNSIGNED_LONG_LONG_INT" >
| < AC_USE_SYSTEM_EXTENSIONS: "AC_USE_SYSTEM_EXTENSIONS" >
| < AC_WARNING: "AC_WARNING" >
}

/* Autoconf obsolete macros */

<*>
TOKEN :
{
  < AC_AIX: "AC_AIX" >
| < AC_ALLOCA: "AC_ALLOCA" >
| < AC_ARG_ARRAY: "AC_ARG_ARRAY" >
| < AC_C_CROSS: "AC_C_CROSS" >
| < AC_C_LONG_DOUBLE: "AC_C_LONG_DOUBLE" >
| < AC_CANONICAL_SYSTEM: "AC_CANONICAL_SYSTEM" >
| < AC_CHAR_UNSIGNED: "AC_CHAR_UNSIGNED" >
| < AC_CHECKING: "AC_CHECKING" >
| < AC_COMPILE_CHECK: "AC_COMPILE_CHECK" >
| < AC_CONST: "AC_CONST" >
| < AC_CROSS_CHECK: "AC_CROSS_CHECK" >
| < AC_CYGWIN: "AC_CYGWIN" >
| < AC_DECL_SYS_SIGLIST: "AC_DECL_SYS_SIGLIST" >
| < AC_DECL_YYTEXT: "AC_DECL_YYTEXT" >
| < AC_DIR_HEADER: "AC_DIR_HEADER" >
| < AC_DYNIX_SEQ: "AC_DYNIX_SEQ" >
| < AC_EXEEXT: "AC_EXEEXT" >
| < AC_EMXOS2: "AC_EMXOS2" >
| < AC_ENABLE: "AC_ENABLE" >
| < AC_ERROR: "AC_ERROR" >
| < AC_FIND_X: "AC_FIND_X" >
| < AC_FIND_XTRA: "AC_FIND_XTRA" >
| < AC_FOREACH: "AC_FOREACH" >
| < AC_FUNC_CHECK: "AC_FUNC_CHECK" >
| < AC_FUNC_SETVBUF_REVERSED: "AC_FUNC_SETVBUF_REVERSED" >
| < AC_FUNC_WAIT3: "AC_FUNC_WAIT3" >
| < AC_GCC_TRADITIONAL: "AC_GCC_TRADITIONAL" >
| < AC_GETGROUPS_T: "AC_GETGROUPS_T" >
| < AC_GETLOADAVG: "AC_GETLOADAVG" >
| < AC_GNU_SOURCE: "AC_GNU_SOURCE" >
| < AC_HAVE_FUNCS: "AC_HAVE_FUNCS" >
| < AC_HAVE_HEADERS: "AC_HAVE_HEADERS" >
| < AC_HAVE_LIBRARY: "AC_HAVE_LIBRARY" >
| < AC_HAVE_POUNDBANG: "AC_HAVE_POUNDBANG" >
| < AC_HEADER_CHECK: "AC_HEADER_CHECK" >
| < AC_HEADER_EGREP: "AC_HEADER_EGREP" >
| < AC_HELP_STRING: "AC_HELP_STRING" >
| < AC_INLINE: "AC_INLINE" >
| < AC_INT_16_BITS: "AC_INT_16_BITS" >
| < AC_IRIX_SUN: "AC_IRIX_SUN" >
| < AC_ISC_POSIX: "AC_ISC_POSIX" >
| < AC_LANG_C: "AC_LANG_C" >
| < AC_LANG_CPLUSPLUS: "AC_LANG_CPLUSPLUS" >
| < AC_LANG_FORTRAN77: "AC_LANG_FORTRAN77" >
| < AC_LANG_RESTORE: "AC_LANG_RESTORE" >
| < AC_LANG_SAVE: "AC_LANG_SAVE" >
| < AC_LINK_FILES: "AC_LINK_FILES" >
| < AC_LN_S: "AC_LN_S" >
| < AC_LONG_64_BITS: "AC_LONG_64_BITS" >
| < AC_LONG_DOUBLE: "AC_LONG_DOUBLE" >
| < AC_LONG_FILE_NAMES: "AC_LONG_FILE_NAMES" >
| < AC_MAJOR_HEADER: "AC_MAJOR_HEADER" >
| < AC_MEMORY_H: "AC_MEMORY_H" >
| < AC_MINGW32: "AC_MINGW32" >
| < AC_MINIX: "AC_MINIX" >
| < AC_MINUS_C_MINUS_O: "AC_MINUS_C_MINUS_O" >
| < AC_MMAP: "AC_MMAP" >
| < AC_MODE_T: "AC_MODE_T" >
| < AC_OBJEXT: "AC_OBJEXT" >
| < AC_OBSOLETE: "AC_OBSOLETE" >
| < AC_OFF_T: "AC_OFF_T" >
| < AC_OUTPUT_COMMANDS: "AC_OUTPUT_COMMANDS" >
| < AC_PID_T: "AC_PID_T" >
| < AC_PREFIX: "AC_PREFIX" >
| < AC_PROGRAMS_CHECK: "AC_PROGRAMS_CHECK" >
| < AC_PROGRAMS_PATH: "AC_PROGRAMS_PATH" >
| < AC_PROGRAM_CHECK: "AC_PROGRAM_CHECK" >
| < AC_PROGRAM_EGREP: "AC_PROGRAM_EGREP" >
| < AC_PROGRAM_PATH: "AC_PROGRAM_PATH" >
| < AC_REMOTE_TAPE: "AC_REMOTE_TAPE" >
| < AC_RESTARTABLE_SYSCALLS: "AC_RESTARTABLE_SYSCALLS" >
| < AC_RETSIGTYPE: "AC_RETSIGTYPE" >
| < AC_RSH: "AC_RSH" >
| < AC_SCO_INTL: "AC_SCO_INTL" >
| < AC_SETVBUF_REVERSED: "AC_SETVBUF_REVERSED" >
| < AC_SET_MAKE: "AC_SET_MAKE" >
| < AC_SIZEOF_TYPE: "AC_SIZEOF_TYPE" >
| < AC_SIZE_T: "AC_SIZE_T" >
| < AC_STAT_MACROS_BROKEN: "AC_STAT_MACROS_BROKEN" >
| < AC_STDC_HEADERS: "AC_STDC_HEADERS" >
| < AC_STRCOLL: "AC_STRCOLL" >
| < AC_STRUCT_ST_BLKSIZE: "AC_STRUCT_ST_BLKSIZE" >
| < AC_STRUCT_ST_RDEV: "AC_STRUCT_ST_RDEV" >
| < AC_ST_BLKSIZE: "AC_ST_BLKSIZE" >
| < AC_ST_BLOCKS: "AC_ST_BLOCKS" >
| < AC_ST_RDEV: "AC_ST_RDEV" >
| < AC_SYS_RESTARTABLE_SYSCALLS: "AC_SYS_RESTARTABLE_SYSCALLS" >
| < AC_SYS_SIGLIST_DECLARED: "AC_SYS_SIGLIST_DECLARED" >
| < AC_TEST_CPP: "AC_TEST_CPP" >
| < AC_TEST_PROGRAM: "AC_TEST_PROGRAM" >
| < AC_TIMEZONE: "AC_TIMEZONE" >
| < AC_TIME_WITH_SYS_TIME: "AC_TIME_WITH_SYS_TIME" >
| < AC_TRY_COMPILE: "AC_TRY_COMPILE" >
| < AC_TRY_CPP: "AC_TRY_CPP" >
| < AC_TRY_LINK: "AC_TRY_LINK" >
| < AC_TRY_LINK_FUNC: "AC_TRY_LINK_FUNC" >
| < AC_TRY_RUN: "AC_TRY_RUN" >
| < AC_TYPE_SIGNAL: "AC_TYPE_SIGNAL" >
| < AC_UID_T: "AC_UID_T" >
| < AC_UNISTD_H: "AC_UNISTD_H" >
| < AC_USG: "AC_USG" >
| < AC_UTIME_NULL: "AC_UTIME_NULL" >
| < AC_VALIDATE_CACHED_SYSTEM_TUPLE: "AC_VALIDATE_CACHED_SYSTEM_TUPLE" >
| < AC_VERBOSE: "AC_VERBOSE" >
| < AC_VFORK: "AC_VFORK" >
| < AC_VPRINTF: "AC_VPRINTF" >
| < AC_WAIT3: "AC_WAIT3" >
| < AC_WARN: "AC_WARN" >
| < AC_WITH: "AC_WITH" >
| < AC_WORDS_BIGENDIAN: "AC_WORDS_BIGENDIAN" >
| < AC_XENIX_DIR: "AC_XENIX_DIR" >
| < AC_YYTEXT_POINTER: "AC_YYTEXT_POINTER" >
}

/* Autoconf AH macros */

<*>
TOKEN :
{
  < AH_BOTTOM: "AH_BOTTOM" >
| < AH_HEADER: "AH_HEADER" >
| < AH_TEMPLATE: "AH_TEMPLATE" >
| < AH_TOP: "AH_TOP" >
| < AH_VERBATIM: "AH_VERBATIM" >
}

/* Automake AM macros */

<*>
TOKEN :
{
  < AM_INIT_AUTOMAKE: "AM_INIT_AUTOMAKE" >
| < AM_CONDITIONAL: "AM_CONDITIONAL" >
}

/* m4sh macros */

<*>
TOKEN :
{
  < AS_BOURNE_COMPATIBLE: "AS_BOURNE_COMPATIBLE" >
| < AS_BOX: "AS_BOX" >
| < AS_CASE: "AS_CASE" >
| < AS_DIRNAME: "AS_DIRNAME" >
| < AS_ECHO: "AS_ECHO" >
| < AS_ECHO_N: "AS_ECHO_N" >
| < AS_ESCAPE: "AS_ESCAPE" >
| < AS_EXECUTABLE_P: "AS_EXECUTABLE_P" >
| < AS_EXIT: "AS_EXIT" >
| < AS_HELP_STRING: "AS_HELP_STRING" >
| < AS_IF: "AS_IF" >
| < AS_INIT: "AS_INIT" >
| < AS_INIT_GENERATED: "AS_INIT_GENERATED" >
| < AS_LINENO_PREPARE: "AS_LINENO_PREPARE" >
| < AS_LITERAL_IF: "AS_LITERAL_IF" >
| < AS_LITERAL_WORD_IF: "AS_LITERAL_WORD_IF" >
| < AS_ME_PREPARE: "AS_ME_PREPARE" >
| < AS_MESSAGE_FD: "AS_MESSAGE_FD" >
| < AS_MESSAGE_LOG_FD: "AS_MESSAGE_LOG_FD" >
| < AS_MKDIR_P: "AS_MKDIR_P" >
| < AS_ORIGINAL_STDIN_FD: "AS_ORIGINAL_STDIN_FD" >
| < AS_SET_CATFILE: "AS_SET_CATFILE" >
| < AS_SET_STATUS: "AS_SET_STATUS" >
| < AS_SHELL_SANITIZE: "AS_SHELL_SANITIZE" >
| < AS_TMPDIR: "AS_TMPDIR" >
| < AS_TR_CPP: "AS_TR_CPP" >
| < AS_TR_SH: "AS_TR_SH" >
| < AS_UNSET: "AS_UNSET" >
| < AS_VAR_APPEND: "AS_VAR_APPEND" >
| < AS_VAR_ARITH: "AS_VAR_ARITH" >
| < AS_VAR_COPY: "AS_VAR_COPY" >
| < AS_VAR_IF: "AS_VAR_IF" >
| < AS_VAR_POPDEF: "AS_VAR_POPDEF" >
| < AS_VAR_PUSHDEF: "AS_VAR_PUSHDEF" >
| < AS_VAR_SET: "AS_VAR_SET" >
| < AS_VAR_SET_IF: "AS_VAR_SET_IF" >
| < AS_VAR_TEST_SET: "AS_VAR_TEST_SET" >
| < AS_VERSION_COMPARE: "AS_VERSION_COMPARE" >
}

<*>
TOKEN :
{
  < AU_ALIAS: "AU_ALIAS" >
| < AU_DEFUN: "AU_DEFUN" >
}

/* Autoconf AC_* macro */

<*>
TOKEN :
{
  < AC_MACRO_PRIVATE: "_AC_"(["0"-"9","a"-"z","A"-"Z","_"])* >
| < AC_MACRO:         "AC_"(["0"-"9","a"-"z","A"-"Z","_"])* >
| < AC_VARIABLE:      "ac_"(["0"-"9","a"-"z","A"-"Z","_"])* >
}

/* Autoconf AH_* macro */

<*>
TOKEN :
{
  < AH_MACRO_PRIVATE: "_AH_"(["0"-"9","a"-"z","A"-"Z","_"])* >
| < AH_MACRO:         "AH_"(["0"-"9","a"-"z","A"-"Z","_"])* >
| < AH_VARIABLE:      "ah_"(["0"-"9","a"-"z","A"-"Z","_"])* >
}

/* Autoconf AM_* macro */

<*>
TOKEN :
{
  < AM_MACRO_PRIVATE: "_AM_"(["0"-"9","a"-"z","A"-"Z","_"])* >
| < AM_MACRO:         "AM_"(["0"-"9","a"-"z","A"-"Z","_"])* >
| < AM_VARIABLE:      "am_"(["0"-"9","a"-"z","A"-"Z","_"])* >
}

/* Autoconf AN_* macro */

<*>
TOKEN :
{
  < AN_MACRO_PRIVATE: "_AN_"(["0"-"9","a"-"z","A"-"Z","_"])* >
| < AN_MACRO:         "AN_"(["0"-"9","a"-"z","A"-"Z","_"])* >
| < AN_VARIABLE:      "an_"(["0"-"9","a"-"z","A"-"Z","_"])* >
}

/* m4sh AS_* macros */

<*>
TOKEN :
{
  < AS_MACRO_PRIVATE: "_AS_"(["0"-"9","a"-"z","A"-"Z","_"])* >
| < AS_MACRO:         "AS_"(["0"-"9","a"-"z","A"-"Z","_"])* >
| < AS_VARIABLE:      "as_"(["0"-"9","a"-"z","A"-"Z","_"])* >
}

/* Autoconf AU_* macro */

<*>
TOKEN :
{
  < AU_MACRO_PRIVATE: "_AU_"(["0"-"9","a"-"z","A"-"Z","_"])* >
| < AU_MACRO:         "AU_"(["0"-"9","a"-"z","A"-"Z","_"])* >
| < AU_VARIABLE:      "au_"(["0"-"9","a"-"z","A"-"Z","_"])* >
}

/* Autoconf AX_* macro */

<*>
TOKEN :
{
  < AX_MACRO_PRIVATE: "_AX_"(["0"-"9","a"-"z","A"-"Z","_"])* >
| < AX_MACRO:         "AX_"(["0"-"9","a"-"z","A"-"Z","_"])* >
| < AX_VARIABLE:      "ax_"(["0"-"9","a"-"z","A"-"Z","_"])* >
}

/* Unknown macro type */

<*>
TOKEN :
{
  < UNKNOWN_MACRO_PRIVATE: "_A"(["A"-"Z"])"_"(["0"-"9","a"-"z","A"-"Z","_"])* >
| < UNKNOWN_MACRO:         "A"(["A"-"Z"])"_"(["0"-"9","a"-"z","A"-"Z","_"])* >
| < UNKNOWN_VARIABLE:      "a"(["a"-"z"])"_"(["0"-"9","a"-"z","A"-"Z","_"])* >
}

/* Generic M4 m4_* macro */

<*>
TOKEN :
{
  < MF_MACRO_PRIVATE: "_m4_"(["0"-"9","a"-"z","A"-"Z","_"])* >
| < MF_MACRO:         "m4_"(["0"-"9","a"-"z","A"-"Z","_"])* >
}

/* IDENTIFIERS */

<*>
TOKEN :
{
  < IDENTIFIER: <LETTER> (<PART_LETTER>)* >
|
  < #LETTER:
    [  
      "$",
      "A"-"Z",
      "_",
      "a"-"z"
     ]
  >
|
  < #PART_LETTER:
    [  
      "$",
      "0"-"9",
      "A"-"Z",
      "_",
      "a"-"z"
    ]
  >
}

<MCOMMENT>
SPECIAL_TOKEN : 
{
  < ~[] > 
}

<DEFAULT>
TOKEN :
{
  <TEXT: ~[]>
}

/*****************************************
 * The Autoconf file grammar starts here *
 *****************************************/

/*
 * Program structuring syntax follows.
 */

void CompilationUnit():
{}
{
  ( <STUFF_TO_IGNORE: ~[]> )?
  <EOF>
}

void PackageDeclaration():
{}
{
  Modifiers() "package" Name() ";"
}

void ImportDeclaration():
{}
{
  "import" [ "static" ] Name() [ "." "*" ] ";"
}

/*
 * Modifiers. We match all modifiers in a single rule to reduce the chances of
 * syntax errors for simple modifier mistakes. It will also enable us to give
 * better error messages.
 */

int Modifiers():
{
   int modifiers = 0;
}
{
 (
  LOOKAHEAD(2)
  (
   "public" { modifiers |= ModifierSet.PUBLIC; }
  |
   "static" { modifiers |= ModifierSet.STATIC; }
  |
   "protected" { modifiers |= ModifierSet.PROTECTED; }
  |
   "private" { modifiers |= ModifierSet.PRIVATE; }
  |
   "final" { modifiers |= ModifierSet.FINAL; }
  |
   "abstract" { modifiers |= ModifierSet.ABSTRACT; }
  |
   "synchronized" { modifiers |= ModifierSet.SYNCHRONIZED; }
  |
   "native" { modifiers |= ModifierSet.NATIVE; }
  |
   "transient" { modifiers |= ModifierSet.TRANSIENT; }
  |
   "volatile" { modifiers |= ModifierSet.VOLATILE; }
  |
   "strictfp" { modifiers |= ModifierSet.STRICTFP; }
  |
   Annotation()
  )
 )*

 {
    return modifiers;
 }
}

/*
 * Declaration syntax follows.
 */
void TypeDeclaration():
{
   int modifiers;
}
{
  ";"
|
  modifiers = Modifiers()
  (
     ClassOrInterfaceDeclaration(modifiers)
   |
     EnumDeclaration(modifiers)
   |
     AnnotationTypeDeclaration(modifiers)
  )
}


void ClassOrInterfaceDeclaration(int modifiers):
{
   boolean isInterface = false;
}
{
  ( "class" | "interface" { isInterface = true; } )
  <IDENTIFIER>
  [ TypeParameters() ]
  [ ExtendsList(isInterface) ]
  [ ImplementsList(isInterface) ]
  ClassOrInterfaceBody(isInterface)
}

void ExtendsList(boolean isInterface):
{
   boolean extendsMoreThanOne = false;
}
{
   "extends" ClassOrInterfaceType()
   ( "," ClassOrInterfaceType() { extendsMoreThanOne = true; } )*
   {
      if (extendsMoreThanOne && !isInterface)
         throw new ParseException("A class cannot extend more than one other class");
   }
}

void ImplementsList(boolean isInterface):
{}
{
   "implements" ClassOrInterfaceType()
   ( "," ClassOrInterfaceType() )*
   {
      if (isInterface)
         throw new ParseException("An interface cannot implement other interfaces");
   }
}

void EnumDeclaration(int modifiers):
{}
{
  "enum" <IDENTIFIER>
  [ ImplementsList(false) ]
  EnumBody()
}

void EnumBody():
{}
{
   "{"
   [ EnumConstant() ( LOOKAHEAD(2) "," EnumConstant() )* ]
    [ "," ]
   [ ";" ( ClassOrInterfaceBodyDeclaration(false) )* ]
   "}"
}

void EnumConstant():
{}
{
  Modifiers() <IDENTIFIER> [ Arguments() ] [ ClassOrInterfaceBody(false) ]
}

void TypeParameters():
{}
{
   "<" TypeParameter() ( "," TypeParameter() )* ">"
}

void TypeParameter():
{}
{
   <IDENTIFIER> [ TypeBound() ]
}

void TypeBound():
{}
{
   "extends" ClassOrInterfaceType() ( "&" ClassOrInterfaceType() )*
}

void ClassOrInterfaceBody(boolean isInterface):
{}
{
  "{" ( ClassOrInterfaceBodyDeclaration(isInterface) )* "}"
}

void ClassOrInterfaceBodyDeclaration(boolean isInterface):
{
   boolean isNestedInterface = false;
   int modifiers;
}
{
  LOOKAHEAD(2)
  Initializer()
  {
     if (isInterface)
        throw new ParseException("An interface cannot have initializers");
  }
|
  modifiers = Modifiers() // Just get all the modifiers out of the way. If you want to do
              // more checks, pass the modifiers down to the member
  (
      ClassOrInterfaceDeclaration(modifiers)
    |
      EnumDeclaration(modifiers)
    |
      LOOKAHEAD( [ TypeParameters() ] <IDENTIFIER> "(" )
      ConstructorDeclaration()
    |
      LOOKAHEAD( Type() <IDENTIFIER> ( "[" "]" )* ( "," | "=" | ";" ) )
      FieldDeclaration(modifiers)
    |
      MethodDeclaration(modifiers)
    |
      AnnotationTypeDeclaration(modifiers)
  )
|
  ";"
}

void FieldDeclaration(int modifiers):
{}
{
  // Modifiers are already matched in the caller
  Type() VariableDeclarator() ( "," VariableDeclarator() )* ";"
}

void VariableDeclarator():
{}
{
  VariableDeclaratorId() [ "=" VariableInitializer() ]
}

void VariableDeclaratorId():
{}
{
  <IDENTIFIER> ( "[" "]" )*
}

void VariableInitializer():
{}
{
  ArrayInitializer()
|
  Expression()
}

void ArrayInitializer():
{}
{
  "{" [ VariableInitializer() ( LOOKAHEAD(2) "," VariableInitializer() )* ] [ "," ] "}"
}

void MethodDeclaration(int modifiers):
{}
{
  // Modifiers already matched in the caller!
  [ TypeParameters() ]
  ResultType()
  MethodDeclarator() [ "throws" NameList() ]
  ( Block() | ";" )
}

void MethodDeclarator():
{}
{
  <IDENTIFIER> FormalParameters() ( "[" "]" )*
}

void FormalParameters():
{}
{
  "(" [ FormalParameter() ( "," FormalParameter() )* ] ")"
}

void FormalParameter():
{}
{
  // danson, added
  //          [ "final" | Annotation() ]
  // See Java Language Specification, 3rd Edition, section 8.4.1
  Modifiers() [ "final" | Annotation() ] Type() [ "..." ] VariableDeclaratorId()
}

void ConstructorDeclaration():
{}
{
  [ TypeParameters() ]
  // Modifiers matched in the caller
  <IDENTIFIER> FormalParameters() [ "throws" NameList() ]
  "{"
    [ LOOKAHEAD(ExplicitConstructorInvocation())
         ExplicitConstructorInvocation()
    ]
    ( BlockStatement() )*
  "}"
}

void ExplicitConstructorInvocation():
{}
{
  ( <IDENTIFIER> "." )* [ LOOKAHEAD(2) "this" "." ]
  [ TypeArguments() ] ("this"|"super") Arguments() ";"
}

void Initializer():
{}
{
  [ "static" ] Block()
}


/*
 * Type, name and expression syntax follows.
 */

void Type():
{}
{
   LOOKAHEAD(2) ReferenceType()
 |
   PrimitiveType()
}

void ReferenceType():
{}
{
   PrimitiveType() ( LOOKAHEAD(2) "[" "]" )+
  |
   ( ClassOrInterfaceType() ) ( LOOKAHEAD(2) "[" "]" )*
}

void ClassOrInterfaceType():
{}
{
  <IDENTIFIER> [ LOOKAHEAD(2) TypeArguments() ]
  ( LOOKAHEAD(2) "." <IDENTIFIER> [ LOOKAHEAD(2) TypeArguments() ] )*
}

void TypeArguments():
{}
{
   "<" TypeArgument() ( "," TypeArgument() )* ">"
}

void TypeArgument():
{}
{
   ReferenceType()
 |
   "?" [ WildcardBounds() ]
}

void WildcardBounds():
{}
{
   "extends" ReferenceType()
 |
   "super" ReferenceType()
}


void PrimitiveType():
{}
{
  "boolean"
|
  "char"
|
  "byte"
|
  "short"
|
  "int"
|
  "long"
|
  "float"
|
  "double"
}

void ResultType():
{}
{
  "void"
|
  Type()
}

void Name():
/*
 * A lookahead of 2 is required below since "Name" can be followed
 * by a ".*" when used in the context of an "ImportDeclaration".
 */
{}
{
  <IDENTIFIER>
  ( LOOKAHEAD(2) "." <IDENTIFIER>
  )*
}

void NameList():
{}
{
  Name() ( "," Name() )*
}


/*
 * Expression syntax follows.
 */

void Expression():
/*
 * This expansion has been written this way instead of:
 *   Assignment() | ConditionalExpression()
 * for performance reasons.
 * However, it is a weakening of the grammar for it allows the LHS of
 * assignments to be any conditional expression whereas it can only be
 * a primary expression.  Consider adding a semantic predicate to work
 * around this.
 */
{}
{
  ConditionalExpression()
  [
    LOOKAHEAD(2)
    AssignmentOperator() Expression()
  ]
}

void AssignmentOperator():
{}
{
  "=" | "*=" | "/=" | "%=" | "+=" | "-=" | "<<=" | ">>=" | ">>>=" | "&=" | "^=" | "|="
}

void ConditionalExpression():
{}
{
  ConditionalOrExpression() [ "?" Expression() ":" Expression() ]
}

void ConditionalOrExpression():
{}
{
  ConditionalAndExpression() ( "||" ConditionalAndExpression() )*
}

void ConditionalAndExpression():
{}
{
  InclusiveOrExpression() ( "&&" InclusiveOrExpression() )*
}

void InclusiveOrExpression():
{}
{
  ExclusiveOrExpression() ( "|" ExclusiveOrExpression() )*
}

void ExclusiveOrExpression():
{}
{
  AndExpression() ( "^" AndExpression() )*
}

void AndExpression():
{}
{
  EqualityExpression() ( "&" EqualityExpression() )*
}

void EqualityExpression():
{}
{
  InstanceOfExpression() ( ( "==" | "!=" ) InstanceOfExpression() )*
}

void InstanceOfExpression():
{}
{
  RelationalExpression() [ "instanceof" Type() ]
}

void RelationalExpression():
{}
{
  ShiftExpression() ( ( "<" | ">" | "<=" | ">=" ) ShiftExpression() )*
}

void ShiftExpression():
{}
{
  AdditiveExpression() ( ( "<<" ) AdditiveExpression() )*
}

void AdditiveExpression():
{}
{
  MultiplicativeExpression() ( ( "+" | "-" ) MultiplicativeExpression() )*
}

void MultiplicativeExpression():
{}
{
  UnaryExpression() ( ( "*" | "/" | "%" ) UnaryExpression() )*
}

void UnaryExpression():
{}
{
  ( "+" | "-" ) UnaryExpression()
|
  PreIncrementExpression()
|
  PreDecrementExpression()
|
  UnaryExpressionNotPlusMinus()
}

void PreIncrementExpression():
{}
{
  "++" PrimaryExpression()
}

void PreDecrementExpression():
{}
{
  "--" PrimaryExpression()
}

void UnaryExpressionNotPlusMinus():
{}
{
  ( "~" | "!" ) UnaryExpression()
|
  LOOKAHEAD( CastLookahead() )
  CastExpression()
|
  PostfixExpression()
}

// This production is to determine lookahead only.  The LOOKAHEAD specifications
// below are not used, but they are there just to indicate that we know about
// this.
void CastLookahead():
{}
{
  LOOKAHEAD(2)
  "(" PrimitiveType()
|
  LOOKAHEAD("(" Type() "[")
  "(" Type() "[" "]"
|
  "(" Type() ")" ( "~" | "!" | "(" | <IDENTIFIER> | "this" | "super" | "new" | Literal() )
}

void PostfixExpression():
{}
{
  PrimaryExpression() [ "++" | "--" ]
}

void CastExpression():
{}
{
  LOOKAHEAD("(" PrimitiveType())
  "(" Type() ")" UnaryExpression()
|
  "(" Type() ")" UnaryExpressionNotPlusMinus()
}

void PrimaryExpression():
{}
{
  PrimaryPrefix() ( LOOKAHEAD(2) PrimarySuffix() )*
}

void MemberSelector():
{}
{
  "." TypeArguments() <IDENTIFIER>
}

void PrimaryPrefix():
{}
{
  Literal()
|
  LOOKAHEAD( ( <IDENTIFIER> "." )* "this" )
  ( <IDENTIFIER> "." )*
  "this"
|
  "super" "." <IDENTIFIER>
|
   // danson, added this part to support a construct like:
   //   Buffer.super.setDirty(true);
   // See Java Language Specification, 3rd edition, section 15.11.2.
   LOOKAHEAD( ClassOrInterfaceType() "." "super" "." <IDENTIFIER> )
   ClassOrInterfaceType() "." "super" "." <IDENTIFIER>
|
  "(" Expression() ")"
|
  AllocationExpression()
|
  LOOKAHEAD( ResultType() "." "class" )
  ResultType() "." "class"
|
  Name()
}

void PrimarySuffix():
{}
{
  LOOKAHEAD("." "super" ".")
  "." "super"
|
  LOOKAHEAD("." "this")
  "." "this"
|
  LOOKAHEAD(2)
  "." AllocationExpression()
|
  LOOKAHEAD(3)
  MemberSelector()
|
  "[" Expression() "]"
|
  "." <IDENTIFIER>
|
  Arguments()
}

void Literal():
{}
{
  <INTEGER_LITERAL>
|
  <FLOATING_POINT_LITERAL>
|
  <CHARACTER_LITERAL>
|
  <STRING_LITERAL>
|
  BooleanLiteral()
|
  NullLiteral()
}

void BooleanLiteral():
{}
{
  "true"
|
  "false"
}

void NullLiteral():
{}
{
  "null"
}

void Arguments():
{}
{
  "(" [ ArgumentList() ] ")"
}

void ArgumentList():
{}
{
  Expression() ( "," Expression() )*
}

void AllocationExpression():
{}
{
  LOOKAHEAD(2)
  "new" PrimitiveType() ArrayDimsAndInits()
|
  "new" ClassOrInterfaceType() [ TypeArguments() ]
    (
      ArrayDimsAndInits()
    |
      Arguments() [ ClassOrInterfaceBody(false) ]
    )
}

/*
 * The third LOOKAHEAD specification below is to parse to PrimarySuffix
 * if there is an expression between the "[...]".
 */
void ArrayDimsAndInits():
{}
{
  LOOKAHEAD(2)
  ( LOOKAHEAD(2) "[" Expression() "]" )+ ( LOOKAHEAD(2) "[" "]" )*
|
  ( "[" "]" )+ ArrayInitializer()
}


/*
 * Statement syntax follows.
 */

void Statement():
{}
{
  LOOKAHEAD(2)
  LabeledStatement()
|
  AssertStatement()
|
  Block()
|
  EmptyStatement()
|
  StatementExpression() ";"
|
  SwitchStatement()
|
  IfStatement()
|
  WhileStatement()
|
  DoStatement()
|
  ForStatement()
|
  BreakStatement()
|
  ContinueStatement()
|
  ReturnStatement()
|
  ThrowStatement()
|
  SynchronizedStatement()
|
  TryStatement()
}

void AssertStatement():
{}
{
  "assert" Expression() [ ":" Expression() ] ";"
}

void LabeledStatement():
{}
{
  <IDENTIFIER> ":" Statement()
}

void Block():
{}
{
  "{" ( BlockStatement() )* "}"
}

void BlockStatement():
{}
{
  LOOKAHEAD( Modifiers() Type() <IDENTIFIER> )
  LocalVariableDeclaration() ";"
|
  Statement()
|
  ClassOrInterfaceDeclaration(0)
}

void LocalVariableDeclaration():
{}
{
  Modifiers() Type() VariableDeclarator() ( "," VariableDeclarator() )*
}

void EmptyStatement():
{}
{
  ";"
}

void StatementExpression():
/*
 * The last expansion of this production accepts more than the legal
 * Java expansions for StatementExpression.  This expansion does not
 * use PostfixExpression for performance reasons.
 */
{}
{
  PreIncrementExpression()
|
  PreDecrementExpression()
|
  PrimaryExpression()
  [
    "++"
  |
    "--"
  |
    AssignmentOperator() Expression()
  ]
}

void SwitchStatement():
{}
{
  "switch" "(" Expression() ")" "{"
    ( SwitchLabel() ( BlockStatement() )* )*
  "}"
}

void SwitchLabel():
{}
{
  "case" Expression() ":"
|
  "default" ":"
}

void IfStatement():
/*
 * The disambiguating algorithm of JavaCC automatically binds dangling
 * else's to the innermost if statement.  The LOOKAHEAD specification
 * is to tell JavaCC that we know what we are doing.
 */
{}
{
  "if" "(" Expression() ")" Statement() [ LOOKAHEAD(1) "else" Statement() ]
}

void WhileStatement():
{}
{
  "while" "(" Expression() ")" Statement()
}

void DoStatement():
{}
{
  "do" Statement() "while" "(" Expression() ")" ";"
}

void ForStatement():
{}
{
  "for" "("

  (
      LOOKAHEAD(Modifiers() Type() <IDENTIFIER> ":")
      Modifiers() Type() <IDENTIFIER> ":" Expression()
    |
     [ ForInit() ] ";" [ Expression() ] ";" [ ForUpdate() ]
  )

  ")" Statement()
}

void ForInit():
{}
{
  LOOKAHEAD( Modifiers() Type() <IDENTIFIER> )
  LocalVariableDeclaration()
|
  StatementExpressionList()
}

void StatementExpressionList():
{}
{
  StatementExpression() ( "," StatementExpression() )*
}

void ForUpdate():
{}
{
  StatementExpressionList()
}

void BreakStatement():
{}
{
  "break" [ <IDENTIFIER> ] ";"
}

void ContinueStatement():
{}
{
  "continue" [ <IDENTIFIER> ] ";"
}

void ReturnStatement():
{}
{
  "return" [ Expression() ] ";"
}

void ThrowStatement():
{}
{
  "throw" Expression() ";"
}

void SynchronizedStatement():
{}
{
  "synchronized" "(" Expression() ")" Block()
}

void TryStatement():
/*
 * Semantic check required here to make sure that at least one
 * finally/catch is present.
 */
{}
{
  "try" Block()
  ( "catch" "(" FormalParameter() ")" Block() )*
  [ "finally" Block() ]
}

/* Annotation syntax follows. */

void Annotation():
{}
{
   LOOKAHEAD( "@" Name() "(" ( <IDENTIFIER> "=" | ")" ))
   NormalAnnotation()
 |
   LOOKAHEAD( "@" Name() "(" )
   SingleMemberAnnotation()
 |
   MarkerAnnotation()
}

void NormalAnnotation():
{}
{
   "@" Name() "(" [ MemberValuePairs() ] ")"
}

void MarkerAnnotation():
{}
{
  "@" Name()
}

void SingleMemberAnnotation():
{}
{
  "@" Name() "(" MemberValue() ")"
}

void MemberValuePairs():
{}
{
   MemberValuePair() ( "," MemberValuePair() )*
}

void MemberValuePair():
{}
{
    <IDENTIFIER> "=" MemberValue()
}

void MemberValue():
{}
{
   Annotation()
 |
   MemberValueArrayInitializer()
 |
   ConditionalExpression()
}

void  MemberValueArrayInitializer():
{}
{
  "{" (MemberValue() ( LOOKAHEAD(2) "," MemberValue() )* [ "," ])? "}"
}


/* Annotation Types. */

void AnnotationTypeDeclaration(int modifiers):
{}
{
  "@" "interface" <IDENTIFIER> AnnotationTypeBody()
}

void AnnotationTypeBody():
{}
{
  "{" ( AnnotationTypeMemberDeclaration() )* "}"
}

void AnnotationTypeMemberDeclaration():
{
   int modifiers;
}
{
 modifiers = Modifiers()
 (
   LOOKAHEAD(Type() <IDENTIFIER> "(")
   Type() <IDENTIFIER> "(" ")" [ DefaultValue() ] ";"
  |
   ClassOrInterfaceDeclaration(modifiers)
  |
   EnumDeclaration(modifiers)
  |
   AnnotationTypeDeclaration(modifiers)
  |
   FieldDeclaration(modifiers)
 )
 |
   ( ";" )
}

void DefaultValue():
{}
{
  "default" MemberValue()
}
